const #include <fstream>
#include <string>
#include <iostream>
#include <sstream>
#include "GPIOClass.h"
using
namespace
std;
GPIOClass::GPIOClass()
{
    
this
->gpionum = 
"4"
; 
//GPIO4 is default
}
GPIOClass::GPIOClass(string gnum)
{
    
this
->gpionum = gnum;  
//Instatiate GPIOClass object for GPIO pin number "gnum"
}
int
GPIOClass::export_gpio()
{
    
string export_str = 
"/sys/class/gpio/export"
;
    
ofstream exportgpio(export_str.c_str()); 
// Open "export" file. Convert C++ string to C string. Required for all Linux pathnames
    
if
(exportgpio < 0){
        
cout << 
" OPERATION FAILED: Unable to export GPIO"
<< 
this
->gpionum <<
" ."
<< endl;
        
return
-1;
    
}
    
exportgpio << 
this
->gpionum ; 
//write GPIO number to export
    
exportgpio.close(); 
//close export file
    
return
0;
}
int
GPIOClass::unexport_gpio()
{
    
string unexport_str = 
"/sys/class/gpio/unexport"
;
    
ofstream unexportgpio(unexport_str.c_str()); 
//Open unexport file
    
if
(unexportgpio < 0){
        
cout << 
" OPERATION FAILED: Unable to unexport GPIO"
<< 
this
->gpionum <<
" ."
<< endl;
        
return
-1;
    
}
    
unexportgpio << 
this
->gpionum ; 
//write GPIO number to unexport
    
unexportgpio.close(); 
//close unexport file
    
return
0;
}
int
GPIOClass::setdir_gpio(string dir)
{
    
string setdir_str =
"/sys/class/gpio/gpio"
+ 
this
->gpionum + 
"/direction"
;
    
ofstream setdirgpio(setdir_str.c_str()); 
// open direction file for gpio
        
if
(setdirgpio < 0){
            
cout << 
" OPERATION FAILED: Unable to set direction of GPIO"
<< 
this
->gpionum <<
" ."
<< endl;
            
return
-1;
        
}
        
setdirgpio << dir; 
//write direction to direction file
        
setdirgpio.close(); 
// close direction file
        
return
0;
}
int
GPIOClass::setval_gpio(string val)
{
    
string setval_str = 
"/sys/class/gpio/gpio"
+ 
this
->gpionum + 
"/value"
;
    
ofstream setvalgpio(setval_str.c_str()); 
// open value file for gpio
        
if
(setvalgpio < 0){
            
cout << 
" OPERATION FAILED: Unable to set the value of GPIO"
<< 
this
->gpionum <<
" ."
<< endl;
            
return
-1;
        
}
        
setvalgpio << val ;
//write value to value file
        
setvalgpio.close();
// close value file 
        
return
0;
}
int
GPIOClass::getval_gpio(string& val){
    
string getval_str = 
"/sys/class/gpio/gpio"
+ 
this
->gpionum + 
"/value"
;
    
ifstream getvalgpio(getval_str.c_str());
// open value file for gpio
    
if
(getvalgpio < 0){
        
cout << 
" OPERATION FAILED: Unable to get value of GPIO"
<< 
this
->gpionum <<
" ."
<< endl;
        
return
-1;
            
}
    
getvalgpio >> val ;  
//read gpio value
    
if
(val != 
"0"
)
        
val = 
"1"
;
    
else
        
val = 
"0"
;
    
getvalgpio.close(); 
//close the value file
    
return
0;
}
string GPIOClass::get_gpionum(){
return
this
->gpionum;
}
function turnOnR1(){
    console.log('Relay 1 is on');
    var data=new FormData();
    data.append('Relay','Relay1');
    data.append('set','on');

const spawn =require('child_process');
const process=spawn('python',['.../relay.js']);

process.stdout.on('data',data=>{
console.log(data.toString());
});


return false;
}
function turnOnR2(){
    console.log('Relay 2 is on');
}
function turnOnR3(){
    console.log('Relay 3 is on');
}
function turnOnR4(){
    console.log('Relay 4 is on');
}
function turnOnR5(){
console.log('Relay 5 is on');
}
function turnOnR6(){
    console.log('Relay 6 is on');
}
function turnOnR7(){
    console.log('Relay 7 is on');
}
function turnOnR8(){
    console.log('Relay 8 is on');
}
function turnOffR1(){
    console.log('Relay 1 is off');
}
function turnOffR2(){
    console.log('Relay 2 is off');
}
function turnOffR3(){
    console.log('Relay 3 is off');
}
function turnOffR4(){
    console.log('Relay 4 is off');
}
function turnOffR5(){
console.log('Relay 5 is off');
}
function turnOffR6(){
    console.log('Relay 6 is off');
}
function turnOffR7(){
    console.log('Relay 7 is off');
}
function turnOffR8(){
    console.log('Relay 8 is off');
}
