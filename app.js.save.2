const express =require('express');
const app=express();
const timer = ms => new Promise( res => setTimeout(res, ms));
const fs=require('fs');
const path=require('path');
const bodyParser = require('body-parser');
const {spawn}= require('child_process');
const schedule=require('node-schedule')

app.use(bodyParser.urlencoded({extended: false}));
app.use(express.static(path.join(__dirname, 'html')));

app.get('/',(req,res,next)=>{
    res.sendFile(path.join(__dirname,'./','html','HomePage.html'))
console.log(path.join('sent'));
});

app.use(bodyParser.json());
app.post('/relay',(req,res,next)=>{
var method='Manual';
var relay=req.body.Relay;
    var set=req.body.status;
    if(check_Relay(relay,set)){
signal();
    relays(relay,set,method);
    console.log(req.body);
}
    else console.log('Request Denied!');
    res.end();
});

function log_Data(relay,status,method){
    var database=[];
    var jsonStr=fs.readFileSync('/home/pi/myServer/log.json');
    database=JSON.parse(jsonStr);
    var date=new Date();
    var curDate=date.getDate()+'-'+(date.getMonth()+1)+'-'+date.getFullYear();
    var curTime=date.getHours()+':'+date.getMinutes()+':'+date.getSeconds();
    var i=0;
    while(i<=7){
        if(i==(Number(relay)-1)){
            database[i].method=method;
            database[i].relay=relay;
            database[i].status=status;
            database[i].time=curTime;
            database[i].date=curDate;
        }
        i++;
    }
    fs.writeFileSync('/home/pi/myServer/log.json',JSON.stringify(database,null,4));
}


function relays(relay,status,method){
    this.relay=relay;
    this.status=status;
    var arg1="-r="+relay;
    var arg2="-s="+status;

log_Data(relay,status,method);
//log_user_Data(relay,status,method);

    spawn('python',['/home/pi/myServer/py/Relay.py',arg1,arg2]);
    
}

function check_Relay(relay,set){
    var database={};
    var jsonStr=fs.readFileSync('/home/pi/myServer/log.json');
    database=JSON.parse(jsonStr);
    var i=0;
    while(i<=7){
        if(i==(Number(relay)-1)){
        if(set==database[i].status){
            return false;
        }
        else return true;
        
        }
        i++;
    }
}

function reset_Relay(){
var method='Reset';
    var database={};
    var jsonStr=fs.readFileSync('/home/pi/myServer/log.json');
    database=JSON.parse(jsonStr);
    var i=0;
    while(i<8){
timer(10000).then(relays(i+1,database[i].status,method));
//        var relay=new relays(i+1,database[i].status,method);
        i++;
    }
}

function signal(){
    spawn('python',['/home/pi/myServer/py/Relay.py','-o=get']);

}


function _do(relay,set){
    var method='Automated'
    const task=schedule.scheduleJob('18 22 * * *',()=>{
        relays(relay,set,method)
    })    
}

_do('1','on')

reset_Relay();


app.listen(8080);
